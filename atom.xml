<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>connectin&#39; the dots</title>
  
  <subtitle>blog to connect the dots</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.amoseui.com/"/>
  <updated>2017-10-03T03:34:47.575Z</updated>
  <id>http://blog.amoseui.com/</id>
  
  <author>
    <name>amoseui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weekly TIL 201702</title>
    <link href="http://blog.amoseui.com/2017/01/10/til-201702/"/>
    <id>http://blog.amoseui.com/2017/01/10/til-201702/</id>
    <published>2017-01-09T16:27:06.000Z</published>
    <updated>2017-10-03T03:34:47.575Z</updated>
    
    <content type="html"><![CDATA[<p>Weekly TIL #201702 <em>(20170102 - 20170109 : 2 TILs)</em></p><hr><h2 id="Merge-two-repositories"><a href="#Merge-two-repositories" class="headerlink" title="Merge two repositories"></a>Merge two repositories</h2><blockquote><p>20170107 git</p><p>개인 프로젝트에 안드로이드 기본 프로젝트 history 를 merge하여 통합.<br>merge commit이 안 생겼으면 좋겠는데 해결할 방법을 찾지 못 했다.</p></blockquote><p>e.g.) Merge Android Music repository to my project.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:amoseui/android-music-renewal.git</div><div class="line">$ git remote add Music https://android.googlesource.com/platform/packages/apps/Music</div><div class="line">$ git fetch Music</div><div class="line">$ git merge --allow-unrelated-histories Music/master</div><div class="line">$ git remote remove Music</div><div class="line">$ git <span class="built_in">log</span> --oneline</div><div class="line">5c0ac48 Merge https://android.googlesource.com/platform/packages/apps/Music</div><div class="line">51bfd7f Initial commit</div><div class="line">ef3044c Import translations. DO NOT MERGE</div><div class="line">291eb7c Import translations. DO NOT MERGE am:</div></pre></td></tr></table></figure><hr><h2 id="Apply-global-gitignore"><a href="#Apply-global-gitignore" class="headerlink" title="Apply global .gitignore"></a>Apply global .gitignore</h2><blockquote><p>20170109 git</p><p>*.swp 파일이나 .DS_Store 등 모든 프로젝트에서 기본으로 제외될 파일들을 global .gitignore로 적용.</p></blockquote><p>Apply global .gitignore to exclude files on all projects</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global core.excludesfile <span class="string">'~/.gitignore'</span></div></pre></td></tr></table></figure><p>It’s added in ~/.gitconfig<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[core]</div><div class="line">    excludesfile = ~/.gitignore</div></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Weekly TIL #201702 &lt;em&gt;(20170102 - 20170109 : 2 TILs)&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="TIL" scheme="http://blog.amoseui.com/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>Weekly TIL 201701</title>
    <link href="http://blog.amoseui.com/2017/01/03/til-201701/"/>
    <id>http://blog.amoseui.com/2017/01/03/til-201701/</id>
    <published>2017-01-02T15:32:13.000Z</published>
    <updated>2017-10-03T03:34:47.575Z</updated>
    
    <content type="html"><![CDATA[<p>Weekly TIL #201701 <em>(20161023 - 20170101 : 8 TILs)</em></p><hr><h2 id="Count-TIL’s"><a href="#Count-TIL’s" class="headerlink" title="Count TIL’s"></a>Count TIL’s</h2><blockquote><p>20161023 vim</p><p>vim 상에서 README에 있는 링크가 몇개가 존재하는지 확인하여 TIL 개수를 파악하기 위한 vim 스크립트<br>reference에 있는 다른 TIL 프로젝트를 참고하였다.</p></blockquote><p>Count number of TIL’s in til project.</p><p>Add below lines to ~/.vimrc.<br>This allows .vimrc in each directories even if it does unsafe things.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> exrc</div><div class="line"><span class="keyword">set</span> secure</div></pre></td></tr></table></figure><hr><p>.vimrc in til project<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>! <span class="title">CountTils</span><span class="params">()</span></span></div><div class="line">  <span class="keyword">execute</span> <span class="string">'%s/^- \[//n'</span></div><div class="line"><span class="keyword">endfunction</span></div><div class="line"></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">c</span> :<span class="keyword">call</span> CountTils()<span class="symbol">&lt;cr&gt;</span></div></pre></td></tr></table></figure></p><p>When you open README.md, press ‘\ + c’.<br>This will read number of items with ‘- <a href="#Reference">link</a>‘ format.<br>It will show ‘N matches on N lines’ in terminal.</p><h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><ul><li><a href="https://github.com/jbranchaud/til#usage" target="_blank" rel="external">usage</a></li><li><a href="https://github.com/jbranchaud/til/blob/master/.vimrc" target="_blank" rel="external">source</a></li></ul><hr><h2 id="Update-a-new-post"><a href="#Update-a-new-post" class="headerlink" title="Update a new post"></a>Update a new post</h2><blockquote><p>20161027 hexo</p><p>hexo에서 draft를 생성하고 publish하는 방법 요약. 할 때마다 헷갈려서 작성하였다.</p></blockquote><p>Update a new post and deploy it to blog.</p><hr><p>Create a draft.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new draft <span class="variable">$&#123;title&#125;</span></div></pre></td></tr></table></figure><p>in source/_drafts/${title}.md</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: $&#123;title&#125;</div><div class="line">tags:</div><div class="line">  - tag</div><div class="line">---</div><div class="line"></div><div class="line">contents</div></pre></td></tr></table></figure><hr><p>Publish a post in draft</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish draft <span class="variable">$&#123;title&#125;</span></div></pre></td></tr></table></figure><hr><p>Generate and run server<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo server</div></pre></td></tr></table></figure></p><hr><h2 id="Generate-and-apply-a-git-patch"><a href="#Generate-and-apply-a-git-patch" class="headerlink" title="Generate and apply a git patch"></a>Generate and apply a git patch</h2><blockquote><p>20161028 git</p><p>patch 파일을 생성하고 다시 이를 적용하는 방법.<br>같은 프로젝트지만 다른 폴더에 위치할 때 패치를 옮기기 위한 방법으로 사용한다.</p></blockquote><p>Generate the patch of the topmost <n> commits from a specific <sha1> hash.</sha1></n></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git format-patch -&lt;n&gt; &lt;SHA1&gt;</div></pre></td></tr></table></figure><hr><p>Apply the patch file in a local directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git apply &#123;NAME&#125;.patch</div></pre></td></tr></table></figure><hr><h2 id="Use-repr-strings-for-debugging-output"><a href="#Use-repr-strings-for-debugging-output" class="headerlink" title="Use repr strings for debugging output"></a>Use repr strings for debugging output</h2><blockquote><p>20161030 python</p><p>클래스에 <strong>repr</strong>를 선언하여 정의한 포맷대로 class 정보를 print 할 수 있다.</p></blockquote><p>repr returns strings of object info</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">b = eval(repr(a))</div><div class="line">asser a == b</div></pre></td></tr></table></figure><hr><p>Declare __repr__ method to represent object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReprClass</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">      self.x = x</div><div class="line">      self.y = y</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">return</span> <span class="string">'ReprClass(%d, %d)'</span> % (self.x, self.y)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">obj = ReprClass(<span class="number">1</span>, <span class="number">2</span>):</div><div class="line">print(obj)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">ReprClass(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure><hr><p>If you can’t control declaration of the class,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">obj = ReprClass(<span class="number">3</span>, <span class="number">4</span>):</div><div class="line">print(obj.__dict__)</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div><div class="line">&#123;<span class="string">'y'</span>: <span class="number">4</span>, <span class="string">'x'</span>: <span class="number">3</span>&#125;</div></pre></td></tr></table></figure><hr><h5 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h5><ul><li><a href="https://www.amazon.com/Effective-Python-Specific-Software-Development/dp/0134034287" target="_blank" rel="external">Effective Python #56</a><ul><li><a href="http://www.yes24.com/24/goods/25138160?scode=032&amp;OzSrank=6" target="_blank" rel="external">한글 번역: 파이썬 코딩의 기술</a></li></ul></li></ul><hr><h2 id="Untrack-files-after-add-in-gitignore"><a href="#Untrack-files-after-add-in-gitignore" class="headerlink" title="Untrack files after add in .gitignore"></a>Untrack files after add in .gitignore</h2><blockquote><p>20161103 git</p><p>기존 git history에 포함 되어있는 파일을 .gitignore에 추가하여 빼고 싶은 경우,<br>.gitignore에 추가하였지만 git status에 안 잡힐 때 해결 방법</p></blockquote><p>Add some files you don’t want to track anymore in .gitignore in the middle of the project</p><p>.gitignore<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle.properties</div></pre></td></tr></table></figure></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git add .gitignore</div><div class="line">$ git commit -m <span class="string">"test"</span></div><div class="line">$ git rm --cached -r gradle.properties</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (Use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line">      deleted: gradle.properties</div><div class="line"></div><div class="line">$ git add gradle.properties</div><div class="line">$ git commit --amend</div></pre></td></tr></table></figure><p>Now the file is not in the version control and still alive in local.</p><hr><h2 id="Get-properties-or-environment-variables"><a href="#Get-properties-or-environment-variables" class="headerlink" title="Get properties or environment variables"></a>Get properties or environment variables</h2><blockquote><p>20161105 gradle</p><p>공개해서는 안 되는 KEY 같은 값들을 환경 변수에 저장하고 gradle에서 읽어와 Java 파일에 넘기는 방법</p></blockquote><p>Get some variables from hidden files or environment</p><p>Set variables in gradle.properties<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KEY=AZ2Fdfjlafj23jfaZKEF</div></pre></td></tr></table></figure></p><p>or</p><p>export environment variables, usually save on CI server<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> KEY=<span class="string">"AZ2Fdfjlafj23jfaZKEF"</span></div></pre></td></tr></table></figure></p><hr><p>in build.gradle<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">key</span> = <span class="title">project</span>.<span class="title">hasProperty</span><span class="params">(<span class="string">'KEY'</span>)</span></span> ? KEY : <span class="string">"$System.env.KEY"</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">android &#123;</div><div class="line">  defaultConfig &#123;</div><div class="line">    ...</div><div class="line">    buildConfigField <span class="string">'String'</span>, <span class="string">'KEY'</span>, <span class="string">"\"$&#123;key&#125;\""</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>Set constants from BuildConfig<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET_KEY = BuildConfig.KEY;</div></pre></td></tr></table></figure></p><hr><h2 id="Test-Terms-테스트-용어-정리"><a href="#Test-Terms-테스트-용어-정리" class="headerlink" title="Test Terms (테스트 용어 정리)"></a>Test Terms (테스트 용어 정리)</h2><blockquote><p>20161110 testing</p><p>테스트 용어 정리</p></blockquote><p>테스트 관련 용어 정리</p><hr><ul><li>테스트 더블(Test Double)<ul><li>더미 객체(Dummy Object)<ul><li>모조품, 단순한 껍데기</li><li>단지 인스턴스화될 수 있는 객체 수준</li></ul></li><li>테스트 스텁(Test Stub)<ul><li>더미 객체가 마치 실제로 동작하는 것처럼 보이게 만들어놓은 객체</li><li>인스턴스화된 객체가 특정 상태나 모습을 대표</li></ul></li><li>페이크 객체(Fake Object)<ul><li>여러 개의 인스턴스를 대표할 수 있는 경우</li><li>좀 더 복잡한 구현이 들어가 있는 객체</li></ul></li><li>테스트 스파이(Test Spy)<ul><li>특정 객체가 사용됐는지, 그 객체의 예상된 메소드가 정상적으로 호출되었는지 확인</li></ul></li><li>Mock 객체(Mock Object)<ul><li>행위를 껌증하기 위해 사용되는 객체</li></ul></li></ul></li></ul><hr><ul><li>상태 기반 테스트(state base test)<ul><li>테스트 대상 클래스의 메소드를 호출하고, 그 결과값과 예상값을 비교</li><li>특정한 메소드를 거친 후, 객체의 상태에 대해 예상값과 비교하는 방식</li></ul></li><li>행위 기반 테스트(behavior base test)<ul><li>올바른 로직 수행에 대한 판단의 근거로 특정한 동작의 수행 여부를 이용</li><li>테스트 스파이 객체를 사용하거나 자체적으로 검증 기능을 제공하는 Mock 객체를 따로 만들어서 테스트 케이스를 작성</li></ul></li></ul><hr><h5 id="Reference-2"><a href="#Reference-2" class="headerlink" title="Reference"></a>Reference</h5><ul><li><a href="http://www.yes24.com/24/goods/3908398?scode=029" target="_blank" rel="external">테스트 주도 개발 : 고품질 쾌속개발을 위한 TDD 실천법과 도구</a></li></ul><hr><h2 id="Common-Terms-용어-정리"><a href="#Common-Terms-용어-정리" class="headerlink" title="Common Terms (용어 정리)"></a>Common Terms (용어 정리)</h2><blockquote><p>20161114 java</p><p>Singleton을 다시 공부하면서 Lazy Initialization의 뜻을 다시 정리</p></blockquote><p>Java 용어 정리</p><hr><h6 id="Lazy-Initialization-게으른-초기화"><a href="#Lazy-Initialization-게으른-초기화" class="headerlink" title="Lazy Initialization (게으른 초기화)"></a>Lazy Initialization (게으른 초기화)</h6><ul><li>객체가 필요할 때 만들어 쓰는 방식</li><li>정의된 필드가 많은 경우 사용되지 않는 경우</li><li>초기 구동 시간을 줄여야 하는 경우</li><li>디버깅이 어렵다</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Weekly TIL #201701 &lt;em&gt;(20161023 - 20170101 : 8 TILs)&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="TIL" scheme="http://blog.amoseui.com/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>2016년과 2017년</title>
    <link href="http://blog.amoseui.com/2017/01/01/new-year/"/>
    <id>http://blog.amoseui.com/2017/01/01/new-year/</id>
    <published>2017-01-01T14:41:19.000Z</published>
    <updated>2017-10-03T03:34:47.575Z</updated>
    
    <content type="html"><![CDATA[<p>다사다난했던 2016년이 지나고 2017년이 시작됐다.</p><p>항상 연말이 되면 일찌감치 그 해의 아쉬움 때문에 다음 해에 대한 이런저런 생각을 한다. 그리고 구체적인 계획을 짜기 위해서 매해 세웠던 목표와 결산을 찾아본다. 지금은 작년에 썼던 2016년의 목표, 아직 정리 중인 2017년의 목표, 그리고 1년 전 블로그에 남긴 <a href="http://blog.amoseui.com/2016/01/01/new-year/">2015년과 2016년</a>이라는 글을 보면서 이 글을 쓰고 있다.</p><p>충격적이었다.</p><p>최근 3년간 별 차이 없는 목표를 세우고 있다는 사실도 놀라웠지만 더 놀라웠던 것이 있었다. 작년에 썼던 글의 앞 뒤의 두 문단을 다시 이어 붙이면 오늘 쓰려고 했던 글이 되기 때문이다.</p><blockquote><p>2015년, 여러모로 아쉬운 한 해였다.</p><p>특별히 남긴 것 없이 일년을 보내지 않았나 싶다. 연말이 되어가면서 머리 속으로 생각했던 다음 해 계획은 대부분 연초에 세웠던 계획과 별 차이가 없었다. 그 사실을 바로 깨닫는 순간 바로 2015년은 망한 해구나라는 걸 느꼈다.</p><p>…</p><p>2016년이 앞으로의 인생을 결정지을 중요한 시점이 될 것이다. 건강을 우선으로 하고, 글 쓰는 능력, 말하는 능력을 향상 시키길 원한다. 소프트웨어 개발의 기본을 키우는 기간이 되길 바란다. 앞서 말했듯이, 정리를 빨리 끝내고 그 위에 내 자신을 쌓아 진화하는 한 해가 되었으면 한다.</p></blockquote><p>올해도 똑같다. 2016년을 인생에서 중요한 해라고 했지만 그렇게 시간을 보내진 못 했다. 개인적인 발전을 위한 목표는 거의 이루지 못했다. 결국 매년 같은 생각을 하면서 지키지 못 하고 발전이 없는 상태로 1년 뒤 똑같은 생각과 말을 반복하고 있는 것이다.</p><p>그래도 올해는 조금 더 나은 조건에서 시작한다는 생각이 든다. 생산성에 대한 고민으로 자신만의 체계를 잡아가면서 작년보다 더 정리된 상태로 새해를 맞게 되었기 때문이다. 이 틀 안에서 많이 읽고, 많이 쓰면서 기록을 남기는 것이 2017년 나의 목표이다.</p><p>올해 12월 31일에는 2017년에 대한 자세한 회고를 부끄럽지 않게 남길 수 있길 바란다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;다사다난했던 2016년이 지나고 2017년이 시작됐다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="2017" scheme="http://blog.amoseui.com/tags/2017/"/>
    
      <category term="목표" scheme="http://blog.amoseui.com/tags/%EB%AA%A9%ED%91%9C/"/>
    
  </entry>
  
  <entry>
    <title>DEVIEW 2016 DAY 2 후기</title>
    <link href="http://blog.amoseui.com/2016/10/26/deview/"/>
    <id>http://blog.amoseui.com/2016/10/26/deview/</id>
    <published>2016-10-25T15:36:10.000Z</published>
    <updated>2017-10-03T03:34:47.575Z</updated>
    
    <content type="html"><![CDATA[<p>올해 처음으로 네이버에서 주최하는 DEVIEW 를 다녀왔다. 예전부터 가고 싶었지만 수업 또는 출근 때문에 생각조차 안하고 있었다. 올해도 그렇게 지나가나 싶었지만 회사에서 2일차 티켓이 남는다는 소식을 듣고 재빨리 손을 들어 갈 수 있게 되었다.</p><p>2008년 처음 외부 공개 컨퍼런스가 된 이후 시간이 제법 흘러 이번이 아홉번째 DEVIEW 라고 한다. 작년 세션을 자세히 살펴보지는 않았지만 파이콘과 마찬가지로 딥러닝 주제가 예년보다 늘어난 것 같다. 국내에서 최대라고 볼 수 있는 데이터를 가지고 있는 네이버이기 때문에 이를 어떻게 활용하고 있는지 공유하는 자리가 많았다.</p><p>1일차 세션이 좀 더 업무과 연관된 내용이 많아 아쉬웠다. 유일하게 참석해 본 컨퍼런스인 파이콘에 비교를 해보자면 회사가 주최하는 컨퍼런스이고 규모가 큰 회사에서 실제로 사용하고 있는 서비스에 대한 내용이 주를 이루기 때문에 좀 더 전문적이고 진지한 분위기가 주를 이루었다. 이는 주로 네이버 소속 개발자 분들의 세션을 들어서 그렇게 느낀 것일 수도 있다.</p><p>전문 지식이 없는 수준이라 이해를 거의 하지 못 했지만 기록을 위해 간단한 소감을 남긴다.</p><ul><li>나는 서버를 썰 터이니 너는 개발만 하여라<ul><li>Zinst 를 주제로 한 세션이었다. 조금 늦게 도착하여 앞부분 내용을 놓쳤는데 발표 자료를 다시 보니 예전에 Yahoo Korea 에 다닐 때 잘 썼던 Yinst 의 컨셉을 기반으로 만들었다고 한다. 개발자들이 개발을 편하게 하기 위한 DevOps 도구로 개발 환경에서 서버 구성을 편하게 하고 개발자들이 직접 배포도 할 수 있다. Bash로 제작되었다는 것이 신기한 부분이었다.</li></ul></li><li>딥러닝을 활용한 이미지 검색: 포토요약과 타임라인<ul><li>여기서 말하는 이미지 검색은 이미지로 검색을 하는 것이 아닌 텍스트로 이미지를 검색하는 걸 얘기한다. 네이버에서 검색을 했을 때 딥러닝 기술을 통하여 이미지들이 어떤 방식으로 보여지는지 공유하였다. 포토 요약과 타임라인 두 개의 서비스에 대해 각각 발표가 진행되었다. 특히 이미지 타임라인에 대한 내용이 흥미로웠다. 특정 연예인을 검색했을 때 이 연예인의 사진을 이벤트 별로 정리하고 사용자에게 보여주는 서비스였다. 이벤트 별로 정리되는 것은 당연하고 적당한 양의 사진이 최대한 비슷하지 않은 사진들로 다채롭게 보이게 하는 것이 서비스의 목표였다. 당연한 것이지만 생각없이 보던 사진들에도 내부적으로는 다양한 기술이 쓰이고 있다는 점을 다시 깨닫게 되었다.</li></ul></li><li>Kaleido 비긴스: 세계 최초 데이터타입 기반의 동기화 Back-end as a Service<ul><li>네이버에서 만들고 있는 BaaS 플랫폼인 Kaleido 에 대한 내용이었다. BaaS 인 만큼 멀티플랫폼 상태의 동기화에 대한 고민이 많이 느껴졌다. 데이터 타입을 operation 단위로 동기화하는 것이 특이점이며 Parse, Cognito, Firebase 의 특징과 비교하며 앞으로의 발전 가능성까지 발표하였다. 발표와는 별개로 Firebase 를 제대로 써 봐야겠다는 생각이 들었다.</li></ul></li><li>Backend 개발자의 Neural Machine Translation 개발기<ul><li>기계 번역을 주제로 발표하였다. 자체 기술로 개발한 기계 번역 시스템으로 성능이 많이 좋아졌고 블라인드 테스트에서도 좋은 결과를 얻어 성과를 얻고 있다고 한다. 네이버에서 출시한 번역 앱인 Papago 도 이 엔진을 사용하고 있다. 마지막에는 10년 동안 백엔드 개발자였던 발표자가 딥러닝 분야로 넘어오면서 느낀 점을 공유하였다. 기존 개발자도 노력하면 진입할 수 있는 분야지만 꼼꼼한 성격이 요구되고 인내심이 필요한 분야라고 하였다. 각각의 주특기를 가진 사람들이 모여 팀을 이루어 강력한 팀이 되어 좋았다고 한 점이 부러웠다.</li></ul></li><li>네이버 콘텐츠 통계서비스 소개 및 구현 경험 공유<ul><li>밖의 부스에서 시간을 보내느라 앞부분을 조금 놓쳤다. 네이버 콘텐츠 통계 서비스를 위한 로그와 데이터를 어떤 아키텍쳐로 어떤 방식으로 처리하고 있는지 공유하였다. 온갖 관련 기술을 다 조사하고 삽질하면서 구축한 것 같았고 발표자도 쉽지 않은 과정이었기 때문에 이런 유용한 경험들이 좀 더 공유되었으면 한다는 말로 발표를 마쳤다.</li></ul></li><li>딥러닝 예제로 보는 개발자를 위한 통계<ul><li>왠지 네이버에서 좀 높은 직책에 있는 분 같았는데 머신 러닝을 오래 전부터 공부했다는 것을 강조했다. 2012년 뒤늦게(?) 딥러닝을 처음 시작했을 때 했던 착각과 이해하지 못 했던 블랙박스들을 통계학을 공부하고 접목해보면서 Breakthrough 로 만들 수 있었다고 한다. 자신만의 방식으로 통계학을 다시 정리하고 이를 어떻게 적용할 수 있을지 고민하는 내용이 많이 담겨있었다.</li></ul></li></ul><p><strong>아쉬운 점</strong></p><ul><li>관련 기술 기초를 모르니 어려웠다.</li><li>알아도 어려웠을 것이다.(?)</li><li>조금 의도하긴 했지만 결국 네이버 세션만 들어갔는데 굳이 그럴 필요는 없었다.</li><li>다른 회사들 세션은 파이콘과 조금 겹쳐서 안 들어간 점도 있다.</li><li>그래도 다양한 주제에 대하여 자극이 될 수 있고 다른 레이어와 사람들, 회사를 통해 자극이 되는 시간이었다.</li><li>또 기회가 된다면 내년에도 오고 싶다.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;올해 처음으로 네이버에서 주최하는 DEVIEW 를 다녀왔다. 예전부터 가고 싶었지만 수업 또는 출근 때문에 생각조차 안하고 있었다. 올해도 그렇게 지나가나 싶었지만 회사에서 2일차 티켓이 남는다는 소식을 듣고 재빨리 손을 들어 갈 수 있게 되었다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="컨퍼런스" scheme="http://blog.amoseui.com/tags/%EC%BB%A8%ED%8D%BC%EB%9F%B0%EC%8A%A4/"/>
    
      <category term="딥러닝" scheme="http://blog.amoseui.com/tags/%EB%94%A5%EB%9F%AC%EB%8B%9D/"/>
    
      <category term="네이버" scheme="http://blog.amoseui.com/tags/%EB%84%A4%EC%9D%B4%EB%B2%84/"/>
    
  </entry>
  
  <entry>
    <title>PyCon APAC 2016 후기</title>
    <link href="http://blog.amoseui.com/2016/08/16/pycon/"/>
    <id>http://blog.amoseui.com/2016/08/16/pycon/</id>
    <published>2016-08-16T14:50:02.000Z</published>
    <updated>2017-10-03T03:34:47.575Z</updated>
    
    <content type="html"><![CDATA[<p>작년에 이어 올해에도 PyCon(이하 파이콘)을 다녀왔다. 국내 개최 3회 만에 올해는 아시아-태평양 지역을 대상으로한 PyCon APAC으로 개최하여 1,500명이 넘는 참가자와 함께 최대 규모로 진행되었다. 국제 행사로 열린만큼 ‘Respect, Diversity’라는 주제로 존중과 다양성을 강조하였다.</p><p>파이썬을 주 개발 언어로 사용하고 있진 않지만 필요한 툴이 필요할 때 유용하게 쓰고 있어 이 언어에 대한 관심이 항상 많아 작년부터 참석하고 있다. 대규모 개발 컨퍼런스는 파이콘 외에 참석해 본 경험이 없기 때문에 다른 컨퍼런스와 비교하긴 어렵다. 언어 관련 비영리 컨퍼런스답게 좀 더 자유롭고 젊은 분위기가 있다고 생각된다. 스폰서 기업의 지원과 개인 후원금, 참가비 등으로 운영되기 때문에 자원 봉사자들을 포함한 운영진의 컨퍼런스에 대한 열정 또한 느껴졌다.</p><p>작년과 가장 큰 차이점은 딥러닝 관련 주제가 눈에 띄게 늘었다는 것이었다. 딥러닝에 대해서는 잘 모르지만 1년 사이에 TensorFlow 등의 기술이 오픈되고 보편화되면서 생긴 변화로 보인다.</p><p>메모는 거의 하지 않았고 기억력에 의존한 내용이기 때문에 틀린 내용이 있다면 꼭 지적해주셨으면 좋겠다.</p><p><strong>첫째날</strong></p><ul><li>Wes McKinney 키노트<ul><li>‘파이썬 라이브러리를 활용한 데이터 분석’ 저자로 pandas를 만든 개발자이다. 수학자 출신인 자신이 어떻게 pandas를 시작하게 되었는지부터 현재 개발에 참여하고 있는 Apache Arrow 등 여러가지 이야기를 하였다. 특별히 메모를 하지 않았고 발표 자료도 올라와있지 않아 자세한 내용이 기억나지 않는다.</li></ul></li><li>Jacob Kaplan-Moss 키노트<ul><li>Django의 공동 창시자라고 한다. 갑작스런 일 때문에 우리나라에 오지 못했고 발표라기 보다는 자신이 얘기하는 것을 비디오를 찍어 보내줬다. 밖에 나갔다 와서 앞부분도 놓쳤고 특별히 기억나는 내용도 없었다.</li></ul></li><li>Deep Learning with Python &amp; TensorFlow<ul><li>발표자는 일본 구글 개발자로 작년에도 파이콘에 왔던 걸로 기억한다. 딥러닝과 TensorFlow, 클라우드 머신 러닝에 대한 개괄적인 발표를 하였다.</li></ul></li><li>TOROS: Python Framework for Recommender System<ul><li>카카오에서 파이썬으로 개발한 추천 시스템에 대한 발표였다. 카카오에서는 수 많은 서비스에서 사용자에게 컨텐츠를 추천해주고 있다. 이를 위한 프레임워크를 파이썬으로 개발을 하면서 겪었던 이야기를 하였다. 파이썬의 큰 강점으로 C/C++ 라이브러리와의 호환을 들었고 파이썬 자체의 성능에 대해서는 큰 문제가 없다고 말하며 만약 있다면 개발자도 의심해 봐야한다고 했다. caching에는 서버 리소스를 크게 투입하지 않아도 잘 운영하고 있다고 했으며 RocksDB를 강력히 추천하였다. 실서비스를 하고 있는 카카오의 발표여서 그런지 첫째날 발표 중에서는 가장 인상깊었다.</li></ul></li><li>뉴스를 재미있게 만드는 법; 뉴스잼<ul><li>뉴스잼 서비스를 만들었던 경험을 토대로 데이터 수집, 분석, 전달에 대하여 발표하였다. 각 단계별로 겪었던 시행착오와 사용했던 라이브러리를 일일이 설명해주었다. 정말 기본적인 내용이어서 모르는 사람이 나중에 비슷한 작업을 해야될 때 도움이 될만한 내용이 많았다.</li></ul></li><li>파이썬으로 광고 효과 측정하기<ul><li>하이퍼커넥트에서 사용하는 광고 플랫폼들의 광고 효과를 측정하고 분석, 시각화하는 방법에 대한 발표였다. 광고로 인하여 설치를 할 수는 있지만 환경에 따라 실제로 실행해서 사용하지 않는 경우도 많다고 한다. 자세한 내용은 관련 지식이 없어 조금 어려웠다.</li></ul></li><li>기계학습을 활용한 게임 어뷰징 검출<ul><li>게임 내 어뷰징 유저 검출을 위하여 딥러닝을 사용한 경험에 대한 발표였다. 처음에는 통계적인 방법으로 검출을 하였으나 오탐의 가능성이 있었고 최종적으로 딥러닝을 도입하였다. GM과 상의하면서 데이터와 알고리즘, 피쳐별 중요도를 조절하여 개선했다는 내용이었다.</li></ul></li></ul><p><strong>둘째날</strong></p><ul><li>키노트는 듣지 않았고 근처에서 점심을 먹고 오후 세션부터 참석하였다.</li><li>RPC 프레임워크 제작 삽질기<ul><li>스포카에서 개발 중인 RPC 프레임워크 ‘니름’에 대해 발표하였다. Thrift, Cap’n Proto 등 현존하는 RPC 프레임워크와 스포카의 서비스가 잘 맞지 않아 직접 개발하고 있다는 내용이었다. RPC 프레임워크를 잘 몰라 약간 어려웠다.</li></ul></li><li>검색 로그 시스템 with Python<ul><li>카카오에서 사용하는 로그 시스템에 대한 발표였다. 검색 로그 등을 정제해서 다시 각 서비스에 리턴해주는 역할을 한다. 1분 이내에 빠르게 처리해야하기 때문에 어떻게 시간을 단축하고 성능 개선을 했는지에 대한 내용이었다. 주로 multiprocessing을 적용하여 해결한 경우가 많았다. 전날 카카오의 발표와는 조금 다른 면도 많았고 사내 분위기를 조금 엿볼 수 있는 유쾌한 발표였다.  </li></ul></li><li>Creating AI chat bot with Python 3 and TensorFlow<ul><li>첫째날 발표했던 내용을 영어로 중간 쉬는 시간에 재발표를 하였다. 일본 애니메이션 아이돌마스터 캐릭터를 챗봇으로 모델링하고 학습시켰던 과정을 발표하였다. 딥 러닝을 잘 모르고 발표도 영어로 하여 어려웠지만 흥미로웠다.</li></ul></li><li>Python Profiling and Performance Tuning<ul><li>말그대로 프로파일링과 성능 튜닝에 대한 Pinterest 개발자의 발표였다. 큰 기대를 하고 갔지만 말이 너무 빠르고 내용이 어려워 따라가지 못 했다.</li></ul></li><li>지적 대화를 위한 깊고 넓은 딥러닝 (Feat. TensorFlow)<ul><li>딥러닝 관련 여러 논문 내용과 이를 어떻게 TensorFlow를 사용하여 구현했는지 예제로 보여주었다. 딥러닝 발표의 정점이었다. 그냥 봐도 어려운데 잘 모르니 너무 어렵다.</li></ul></li></ul><p>파이콘에서는 정규 발표 시간이 끝난 후 5분 제한 자유 주제로 한 라이트닝 토크 시간이 있는데 작년에 이 시간을 놓친게 아까울 정도로 인상 깊었던 발표가 많았다.</p><p><strong>아쉬운 점</strong></p><ul><li>OST(Open Space Talk) 세션이 발표 주제 관련 또는 자율적으로 2층 여러 공간에서 열렸으나 하나도 참석해보지 못 했다. 아예 2층에는 올라가보지 않았는데 내년에는 고려해보고 참석해봐야겠다.</li><li>OST도 세션 별로 참석 인원 차이가 컸다고 들었는데 시스템적으로나 시간, 위치적인 환경이 마련되면 더 좋을 것 같다. 라이트닝 토크 시간에 비슷한 지적이 있었다.</li><li>APAC 이름을 걸고 ‘Respect, Diversity’라는 주제였지만 한국어를 모르는 외국 참가자들에게도 통역이나 주제 선정, 운영이 잘 된 편인지는 의문이다.</li><li>라이트닝 토크 자료도 공식 홈페이지에 올려주시면 좋을 것 같다. 짧고 굵은 세션이 워낙 많아 다시 보고 싶은 발표가 많았다.</li></ul><p>아쉬운 점만 많이 쓴 것 같은데 이 외에는 전부 만족스럽고 앞으로도 매번 가고 싶은 파이콘이었다. 정말 많은 분들이 고생하셨고 내년에도 올해만큼 즐거운 컨퍼런스가 되길 바란다.</p><p>워낙 많은 발표와 말을 들어서 그런지 2~3일 밖에 지나지 않았는데도 후기를 작성하는게 쉽지 않았다. 더 부지런해져야 한다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;작년에 이어 올해에도 PyCon(이하 파이콘)을 다녀왔다. 국내 개최 3회 만에 올해는 아시아-태평양 지역을 대상으로한 PyCon APAC으로 개최하여 1,500명이 넘는 참가자와 함께 최대 규모로 진행되었다. 국제 행사로 열린만큼 ‘Respect, Diversity’라는 주제로 존중과 다양성을 강조하였다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="컨퍼런스" scheme="http://blog.amoseui.com/tags/%EC%BB%A8%ED%8D%BC%EB%9F%B0%EC%8A%A4/"/>
    
      <category term="파이썬" scheme="http://blog.amoseui.com/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/"/>
    
      <category term="딥러닝" scheme="http://blog.amoseui.com/tags/%EB%94%A5%EB%9F%AC%EB%8B%9D/"/>
    
  </entry>
  
  <entry>
    <title>2015년과 2016년</title>
    <link href="http://blog.amoseui.com/2016/01/01/new-year/"/>
    <id>http://blog.amoseui.com/2016/01/01/new-year/</id>
    <published>2015-12-31T15:00:00.000Z</published>
    <updated>2017-10-03T03:34:47.575Z</updated>
    
    <content type="html"><![CDATA[<p>2015년, 여러모로 아쉬운 한 해였다.</p><p>특별히 남긴 것 없이 일년을 보내지 않았나 싶다. 연말이 되어가면서 머리 속으로 생각했던 다음 해 계획은 대부분 연초에 세웠던 계획과 별 차이가 없었다. 그 사실을 바로 깨닫는 순간 바로 2015년은 망한 해구나라는 걸 느꼈다.</p><p>개인적으로는 짧은 입원과 전신 마취의 수술을 처음으로 경험 했던 것이 가장 큰 사건이었다. 2주 가량의 휴가와 회복 기간으로 인해 의욕이 많이 꺾이고 일하는 방식도 많이 바뀐 것 같다.</p><p>업무 난이도가 높아지진 않았지만 윗사람과 업무 스타일 차이로 갈등을 빚는 등 스트레스는 점점 늘고 있다. 이 곳은 알고 보니 전쟁터였고 알아서 살아남아야 한다는 사실을 조금 더 느끼게 되었다. 뒤늦게 깨닫고 새 출발을 위해 다른 회사에 면접까지 보러 갔지만 준비가 늦었고 너무나 부족했다. 2015년의 가장 아쉬운 일이다.</p><p>그래도 다행인 것은 이직 준비를 하면서 일일 커밋을 시작했다는 점이다. 그렇다고 딱히 보이는 걸 완성한 건 아니었다. 12시가 되기 전에 커밋을 해야 한다는 압박감 때문에 오히려 아무 일도 못하기도 했다. 그러다가 겨우 거리를 만들어내 억지로 올린 적도 많았다. 그래도 3개월이 넘는 108일동안 실천한 것에 큰 의미가 있다. 2016년에는 하루도 쉬지 않고 하는 것이 목표다.</p><p>사실 2015년 내내 계속 시도했던 건 정리였다. 나 자신을 위한 정리. 하지만 쉽지 않았다. 2015년과 그 이전을 모두 잘 정리하고 2016년을 맞이하려고 한다. 정리된 상태에서 꾸준히 쌓아 올려야 완성이 된다.</p><p>2016년, 인생에 있어서 매우 중요한 해다.</p><p>2016년이 앞으로의 인생을 결정지을 중요한 시점이 될 것이다. 건강을 우선으로 하고, 글 쓰는 능력, 말하는 능력을 향상 시키길 원한다. 소프트웨어 개발의 기본을 키우는 기간이 되길 바란다. 앞서 말했듯이, 정리를 빨리 끝내고 그 위에 내 자신을 쌓아 진화하는 한 해가 되었으면 한다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2015년, 여러모로 아쉬운 한 해였다.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
